THIS IS DOCUMENTED IN REPOSITORIES/WEB-DATABASE/FOREIGN_KEY_GEO.SQL

----ALTER TABLE geo. ADD CONSTRAINT _fk
----FOREIGN KEY () REFERENCES web.() ON DELETE CASCADE;
ALTER TABLE geo.rfmo ADD CONSTRAINT rfmo_rfmo_id_fk
FOREIGN KEY (rfmo_id) REFERENCES web.rfmo(rfmo_id) ON DELETE CASCADE;


TO EXPLAIN ABOUT FOREIGN KEYS...
3.3. Foreign Keys
Recall the weather and cities tables from Chapter 2. 
Consider the following problem: You want to make sure that no one can insert rows in the weather table that do not have a matching 
entry in the cities table. This is called maintaining the referential integrity of your data. In simplistic database systems this 
would be implemented (if at all) by first looking at the cities table to check if a matching record exists, and then inserting or 
rejecting the new weather records. This approach has a number of problems and is very inconvenient, so PostgreSQL can do this for you.

The new declaration of the tables would look like this:

CREATE TABLE cities (
        city     varchar(80) primary key,
        location point
);

CREATE TABLE weather (
        city      varchar(80) references cities(city),
        temp_lo   int,
        temp_hi   int,
        prcp      real,
        date      date
);
Now try inserting an invalid record:

INSERT INTO weather VALUES ('Berkeley', 45, 53, 0.0, '1994-11-28');
ERROR:  insert or update on table "weather" violates foreign key constraint "weather_city_fkey"
DETAIL:  Key (city)=(Berkeley) is not present in table "cities".


The behavior of foreign keys can be finely tuned to your application. We will not go beyond this simple example in this tutorial, 
but just refer you to Chapter 5 for more information. Making correct use of foreign keys will definitely improve the quality of 
your database applications, so you are strongly encouraged to learn about them.

FOR SUPPLEMENTAL TOPICS ON FOREIGN KEYS: http://www.postgresqltutorial.com/postgresql-foreign-key/


MY CASE REGARDING THE FOREIGN KEYS: 

I WANTED TO TRANSFER SAU_GEO.GEO.RFMO_SAU_GEO TO SAU.GEO.RFMO BUT I COULD NOT DO THIS BECAUSE EVERYTIME I DO SO AFTER 
TRUNCATING AND VACUUM FULL ANALYZE THE RFMO TABLE AND THEN TRANSFERRING THE DATA FROM RFMO_SAU_GEO IT FAILS. 
I FOUND OUT THAT IT CANNOT BE TRANSFERRED BECAUSE THE TRUNCATED TABLE RFMO IN QA SAU IS LOOKING FOR FOREIGN KEYS AND 
FUNCTIONS FROM THE DATA I WAS TRANSFERRING (THAT'S RFMO_SAU_GEO). I DO NOT HAVE FOREIGN KEYS AND FUNCTIONS IN MY RFMO_SAU_GEO
TABLE. I DON'T KNOW HOW TO CREATE THEM. 

THEN I FOUND OUT THAT THE REPOSITORY IN WEB-DATABASE HAS SCRIPTS TO CREATE THE CONSTRAINTS, THE FOREIGN KEYS AND INDEXES.
I WAS ABLE TO CREATE THE GEOM INDEX WHICH SHOWED IN THE DEPENDENCIES AND I CREATED THE INDEX FOR THE ID (BUT THE TABLE 
DOESN'T EVEN HAVE AN ID SO I DON'T KNOW WHY AN IDX INDEX WAS EVER CREATED) WHICH I DON'T KNOW IF WORKED BECAUSE I NEVER SAW IT
COME UP FROM THE DEPENDENCIES AFTER I MADE AND RAN THE SCRIPT (THE SCRIPT WORKED ON THE CONSOLE SO I'M WONDERING WHY IT IS 
NOT SHOWING IN THE DEPENDENCIES). THE FOREIGN KEYS, I HAD TO READ THROUGH THE TUTORIALS AND I FOUND OUT THAT THE FOREIGN KEY
IS MADE ON THE RFMO_SAU_GEO TABLE. SO THE FOREIGN KEY SHOULD BE WITH _FK AND SHOULD BE REFERENCED TO THE PARENT TABLE WHICH IS 
THE WEB.RFMO. 

I ACTUALLY TRIED THIS: 

ALTER TABLE geo.rfmo_sau_geo ADD CONSTRAINT rfmo_sau_geo_rfmo_id_fk
FOREIGN KEY (rfmo_id) REFERENCES web.rfmo(rfmo_id) ON DELETE CASCADE;

BUT THEN I GOT THIS ERROR: 

SQL Error [23503]: ERROR: insert or update on table "rfmo_sau_geo" violates foreign key constraint "rfmo_sau_geo_rfmo_id_fk"
  Detail: Key (rfmo_id)=(19) is not present in table "rfmo".
  
THIS ERROR HAPPENED BECAUSE RFMO ID NUMBER 19 IS NOT EVEN IN WEB.RFMO. I NEED TO UPDATE THE WEB.RFMO AND PUT AN RFMO NUMBER 19 
THERE INCLUDING THE NECESSARY INFORMATION ABOUT RFMO NUMBER 19 BEFORE I CAN ADD A FOREIGN KEY TO THE RFMO_SAU_GEO. 

AFTER ADDING RFMO NUMBER 19 IN SAU.WEB.RFMO THE ABOVE SCRIPT ON ADDING FOREIGN KEYS WORKED.  

THIS IS THE DDL OF THE ORIGINAL RFMO TABLE IN SAU_GEO:

CREATE TABLE geo.rfmo (
	gid serial NOT NULL,
	"name" varchar(15) NULL,
	rfmo_id int4 NOT NULL,
	area_km2 numeric NULL,
	shape_length numeric NULL,
	shape_area numeric NULL,
	geom geometry(MULTIPOLYGON, 4326) NULL,
	CONSTRAINT rfmo_pkey PRIMARY KEY (gid)
);
CREATE INDEX rfmo_geom_idx ON rfmo USING gist (geom);
CREATE UNIQUE INDEX rfmo_rfmo_id_idx ON rfmo USING btree (rfmo_id);

-- Permissions

ALTER TABLE geo.rfmo OWNER TO sau_geo;
GRANT ALL ON TABLE geo.rfmo TO sau_geo;



