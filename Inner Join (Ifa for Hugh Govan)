Used this script: 

The INNER JOIN
A INNER JOIN creates a new result table by combining column values of two tables (table1 and table2) based upon the join-predicate. 
The query compares each row of table1 with each row of table2 to find all pairs of rows, which satisfy the join-predicate. 
When the join-predicate is satisfied, column values for each matched pair of rows of table1 and table2 are combined into a result row.
An INNER JOIN is the most common type of join and is the default type of join. You can use INNER keyword optionally.

The following is the syntax of INNER JOIN âˆ’

SELECT table1.column1, table2.column2...
FROM table1
INNER JOIN table2
ON table1.common_filed = table2.common_field;


select count (*) from geo_entity;
select count(*) from v_eez_info;

create table ww_tr_v_eez (
geo_entity_id int4 null,
eez_name varchar(50) null,
area numeric null,
ifa numeric null);

create table ww_tr_web_geo_entity (
geo_entity_id int4 primary key not null,
"name" varchar(50) null,
admin_geo_entity_id int4 null);

select ww_tr_v_eez.geo_entity_id, ww_tr_v_eez.eez_name,
ww_tr_v_eez.area, ww_tr_v_eez.ifa, ww_tr_web_geo_entity."name",
ww_tr_web_geo_entity.admin_geo_entity_id
from ww_tr_v_eez
inner join ww_tr_web_geo_entity
on ww_tr_v_eez.geo_entity_id = ww_tr_web_geo_entity.geo_entity_id;

select ww_tr_web_geo_entity.admin_geo_entity_id, ww_tr_web_geo_entity."name",
ww_tr_v_eez.eez_name, ww_tr_v_eez.area, ww_tr_v_eez.ifa, ww_tr_v_eez.geo_entity_id
from ww_tr_v_eez
inner join ww_tr_web_geo_entity
on ww_tr_v_eez.geo_entity_id = ww_tr_web_geo_entity.geo_entity_id;

create table ifa_area_Hugh_Govan_v1 (
admin_geo_entity_id int4 null,
administrative_country varchar(50)null,
eez_name varchar(50)null,
eez_area numeric null,
ifa_area numeric null,
geo_entity_id int4 null);

select ww_tr_web_geo_entity.admin_geo_entity_id, ww_tr_web_geo_entity."name",
ww_tr_v_eez.eez_name, ww_tr_v_eez.area, ww_tr_v_eez.ifa, ww_tr_v_eez.geo_entity_id
into temp table admingeo
from ww_tr_v_eez
inner join ww_tr_web_geo_entity
on ww_tr_v_eez.geo_entity_id = ww_tr_web_geo_entity.geo_entity_id;

insert into ifa_area_hugh_govan_v1 (admin_geo_entity_id, administrative_country,
eez_name, eez_area, ifa_area, geo_entity_id) 
select * from admingeo;


ALSO I FOUND OUT THAT I CANNOT EXPORT A RESULT SET TO A TABLE IN A DATABASE IF THE NAME OF THE 
COLUMNS ARE NOT THE SAME. IT DOESN'T WORK. BUT IF I DO THAT AS A SCRIPT IN DBEAVER, LIKE
INSERTING IT INTO A TABLE FROM A TEMP TABLE, (WITH TEMP TABLE AND TABLE IN DATABASE WITH DIFFERENT
COLUMN NAMES BUT SAME SEQUENCE OF COLUMNS) IT WORKS. 
